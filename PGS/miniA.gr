DIRECTIVE       BUILD_TREES -> OFF;
                LIST_STATES -> ON;
                
LEXICON         '%ident'  => IDENT;
                '%number' => NUMBER;

SYNTAX mini_pascal

mini_pascal  -> prog_head block  '.';
prog_head    -> 'program' '%ident'  ';';
block        -> dcl  compound_st;
dcl          -> const_dcl  var_dcl  proc_dcl;
const_dcl    -> 'const'  const_def_list  ';';
             -> ;
const_def_list -> const_def;
               ->  const_def_list  ';'  const_def;
const_def    -> '%ident'  '='  '%number';
var_dcl      -> 'var' var_def_list  ';';
             -> ;
var_def_list -> var_def;
             -> var_def_list  ';'  var_def;
var_def      -> ident_list  ':' type;
type         -> 'integer';
             -> 'array' '['constant '..' constant ']' 'of' 'integer';
constant     -> '%number';
             -> '%ident';
ident_list   -> '%ident';
             -> ident_list ',' '%ident';
proc_dcl     -> proc_dcl  proc_dcl_1;
             -> ;  
proc_dcl_1   -> proc_head  block  ';';
proc_head    -> 'procedure' '%ident'  ';';
             -> 'procedure' '%ident' '(' formal_para_list ')' ';';
formal_para_list -> formal_para;
             -> formal_para_list ';' formal_para;
formal_para  -> 'var' ident_list ':' type;
             -> ident_list ':' type;
statement    -> assign_st;
             -> call_st;
             -> compound_st;
             -> if_st;
             -> while_st;
             -> ;
assign_st    -> lhs ':=' exp;
lhs          -> variable;
call_st      -> '%ident';
             -> '%ident' '(' actual_para_list ')';
actual_para_list-> exp;
                 -> actual_para_list ',' exp;
compound_st  -> 'begin' statement_list 'end';
statement_list -> statement;
               -> statement_list ';' statement;
if_st        -> if cond_then  statement;
if           -> 'if';
cond_then    -> condition 'then';
while_st     -> while cond_do statement;
while        -> 'while';
cond_do      -> condition 'do';
condition    -> exp rel_operator exp;
rel_operator -> '=';
             -> '<>';
             -> '<';
             -> '>';
             -> '<=';
             -> '>=';
exp          -> exp '+' term;
             -> exp '-' term;
             -> term;
term         -> term '*' factor;
             -> term 'div' factor;
             -> term 'mod' factor;
             -> factor;
factor       -> '-' factor;
             -> variable;
             -> '%number';
             -> '(' exp ')';
variable     -> '%ident';
             -> '%ident' '[' exp ']';
