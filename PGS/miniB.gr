DIRECTIVE       BUILD_TREES -> OFF;
                LIST_STATES -> ON;
                
LEXICON         '%IDENT' => IDENT;
                '%NUMBER' => NUMBER;

SYNTAX MINI_PASCAL

MINI_PASCAL   -> 'program' '%IDENT' ';' BLOCK '.'     => PROGRAM;
BLOCK         -> DCL COMPOUND_ST                      => BLOCK;
DCL           -> CONST_DCL  VAR_DCL  PROC_DCL         => DCL;
CONST_DCL     -> 'const'  CONST_DEFS ';'              => CONST_DCL;
              -> ;
CONST_DEFS    -> CONST_DEF;
              -> CONST_DEFS ';' CONST_DEF;
CONST_DEF     -> '%IDENT' '=' '%NUMBER'               => CONST_DEF;
VAR_DCL       -> 'var' VAR_DEFS  ';'                  => VAR_DCL;
              -> ;
VAR_DEFS      -> VAR_DEF;
              -> VAR_DEFS  ';'  VAR_DEF;
VAR_DEF       -> VAR_LIST  ':'  TYPE                  => VAR_DEF;
VAR_LIST      -> IDENT_LIST                           => VAR_LIST;
TYPE          -> '%IDENT'                             => INT_TYPE;
              -> 'array' '[' CONSTANT '..' CONSTANT ']'
                 'of' '%IDENT'                        => ARRAY_TYPE;
CONSTANT      -> '%NUMBER';
              -> '%IDENT';
IDENT_LIST    -> '%IDENT';
              -> IDENT_LIST ',' '%IDENT';
PROC_DCL      -> PROC_DEFS                            => PROC_DCL;
              -> ;
PROC_DEFS     -> PROC_DEF ;
              -> PROC_DEFS PROC_DEF;
PROC_DEF      -> PROC_HEAD BLOCK ';'                  => PROC_DEF; 
PROC_HEAD     -> 'procedure' '%IDENT' OPT_FORM_PARAM ;
OPT_FORM_PARAM-> '(' FORMAL_PARAMS ')' ';'            => FORM_PARAM;
              -> ;
FORMAL_PARAMS -> FORMAL_PARAM;
              -> FORMAL_PARAMS ';' FORMAL_PARAM;
FORMAL_PARAM  -> 'var' PARAM_LIST ':' TYPE            => VAR_PARAM;
              -> PARAM_LIST ':' TYPE                  => VALUE_PARAM;
PARAM_LIST    -> IDENT_LIST                           => PARAM_LIST;
STATEMENT     -> ASSIGNMENT_ST;
              -> CALL_ST;
              -> COMPOUND_ST;
              -> IF_ST;
              -> WHILE_ST;
              -> ;
ASSIGNMENT_ST -> VARIABLE ':=' EXP                    => ASSIGN_STMT;
CALL_ST       -> '%IDENT' OPT_ACT_PARAMS                 => CALL_STMT;
OPT_ACT_PARAMS-> '(' ACTUAL_PARAMS ')'                => ACTUAL_PARAM;
              -> ;
ACTUAL_PARAMS -> EXP;
              -> ACTUAL_PARAMS ',' EXP;
COMPOUND_ST   -> 'begin' STATEMENTS 'end'             => COMPOUND_STMT;
STATEMENTS    -> STATEMENT;
              -> STATEMENTS ';' STATEMENT;
IF_ST         -> 'if' CONDITION 'then' STATEMENT      => IF_STMT;
WHILE_ST      -> 'while' CONDITION 'do' STATEMENT     => WHILE_STMT;
CONDITION     -> EXP '='  EXP                         => EQ;
              -> EXP '<>' EXP                         => NE;
              -> EXP  '>' EXP                         => GT;
              -> EXP '=>' EXP                         => GE;
              -> EXP '<'  EXP                         => LT;
              -> EXP '<=' EXP                         => LE;
EXP           -> EXP '+' TERM                         => ADD;
              -> EXP '-' TERM                         => SUB;
              -> TERM;
TERM          -> TERM '*'   FACTOR                    => MUL;
              -> TERM 'div' FACTOR                    => DIV;
              -> TERM 'mod' FACTOR                    => MOD;
              -> FACTOR;
FACTOR        -> '-' FACTOR                           => NEG;
              -> VARIABLE;
              -> '%NUMBER';
              -> '(' EXP ')';
VARIABLE      -> '%IDENT';
              -> '%IDENT' '[' EXP ']'                 => INDEX;
